{% extends 'base.twig' %}
{% set title = person.username %}

{% block header %}
  {% if (me.username == person.username) %}<a class="button" href="/r/add">Add Result</a>{% endif %}<a class="button" href="/leaderboard">Leaderboard</a><a class="button" href="/settings">Settings</a><a class="button" href="/logout">Logout</a>
{% endblock %}

{% block main %}
  <div class="graph-container">
    <div class="graph grey-box">
      <canvas id="personGraph"></canvas>
    </div>
    <div class="stats">
      <div class="row grey-box">
        <span>{{ stats.won }}</span>
        <span>Total Won</span>
      </div>
      <div class="row grey-box">
        <span>{{ stats.played }}</span>
        <span>Total Played</span>
      </div>
      <div class="row grey-box">
        <span>{{ stats.winrate }}</span>
        <span>Win Rate %</span>
      </div>
      <div class="row grey-box">
        <span>{{ stats.average }}</span>
        <span>Avg. Guess</span>
      </div>
    </div>
  </div>

  <div class="cards-container">
    {% if not results %}<p>No results yet!{% if (me.username == person.username) %} <a href="/r/add">Add one?</a>{% endif %}</p>{% else %}
  {% for result in results %}{{ result.render|raw }}{% endfor %}
    {% endif %}
  </div>
{% endblock %}

{% block js %}
  <script src="/assets/js/chart.js"></script>
  <script>
    const data = {
      labels: [{% for result in graphData|keys %}{{ result }} ,{% endfor %}],
      datasets: [{
        label: 'Guesses',
        data: [{% for result in graphData %}{% if (result == 'X') %}'X'{% else %}{{ result ?? 'null'}}{% endif %} ,{% endfor %}],
        fill: false
      }]
    };

    const config = {
      type: 'line',
      data: data,
      options: {
        maintainAspectRatio: true,
        elements: {
          line: {
            borderColor: "#262222"
          },
          point: {
            // backgroundColor: "#78b158",
            backgroundColor: function(context) {
              const index = context.dataIndex;
              const value = context.dataset.data[index];
              return (value === 'X') ? "#a80000" : "#78b158";
            },
            radius: 6,
            hoverRadius: 8
          }
        },
        animation: false,
        scales: {
          y: {
            type: 'category',
            labels: ['X', 6, 5, 4, 3, 2, 1],
            title: {
              display:true,
              text: "Number of Guesses"
            }
          },
          x: {
            title: {
              display: true,
              text: "Puzzle Number"
            }
          }
        },
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            yAlign: "top",
            displayColors: false,
            callbacks: {
              title: function(context) {
                return "Puzzle #"+context[0].label;
              },
              label: function(context) {
                return context.formattedValue + " / 6";
              }
            }
          }
        }
      }
    };

    const personGraph = new Chart(
      document.getElementById('personGraph'),
      config
    );
  </script>
{% endblock %}